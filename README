jz937

This program allows the client to enter an arbitrary number of arguments, which may be either files or directories. Only the files ending with .txt are accepted as regular files. There are no limitations on the number of characters entered for a particular word. Initially, it is assumed that a character is longer than 14 characters, but when there are more characters entered in a word, the program accurately accounts for this.

To compile and run this program, navigate to the place of p2.tar. Use the commands tar -xf p2.tar to decompress the tar file. Then use cd P2 to get into the assignment. To compile, type in "make". Inside the P2 file, there is a directory named "test_files", which includes all the test cases. To get the path for this, enter "pwd" on terminal.

There are four directories inside the folder "test_files": Basics, Irregular, LargeWords, SimpleText.

The first directory, "Basics", contains the two texts from the write-up of this assignment. The reason why it is named "Basics" is because these two texts are from the write-up. If the program is not even able to generate the correct word count for these two files, then it is impossible for the program to execute correctly for other files. By running these tests, the user can confirm whether the basic logic of the words.c is correct. When the two files are ran simultaneously, the output is:
Bar 2
bar 2
spam 2
'oo 1
Foo 1
Foo-bar 1
Super 1
bacon 1
baz-quux 1
eggs 1
foo 1
If these two files are the only ones ran and twice for each file, then the order of the words are still the same, with the frequency of each word doubles.

The second directory, "Irregulars", contains the two texts made up of solely hyphens "-" and apostrophes "'". The goal of these two test files is to measure the program's ability to effectively handle - and '. As described in the assignment, apostrophes are always part of the word, and "-" is a part of the word if and only if it is surrounded by two characters on each side. When counting manually, the two files containing a total of 24 words of "'", and 1 word containing two apostrophes, and 1 containing threes apostrophes. When you run these two test files only, the output is:
' 24
'' 1
''' 1
Again, if the two files are ran twice each time, the output is still ordered by ', '', and ''', with the frequency doubles.

The third file, "LargeWords", containing two files with large words (Larger than the 15 characters as defined in the program). The purpose of the two files is to test the program's ability to handle large words. For the test1.txt in the file, the large word is "Qwertyuiopasdfghjklzxcvbnm", which is 26 characters. For the test2.txt in the file, "sd;lf'gvsd;kgvsdgjgks" is the large word. When you run the program involving only these two files, the results will be:
'dfgbfdsdcsa 2
sdpfgsdsg 2
'bstop 1
Qwertyuiopas 1
Qwertyuiopasdfghjklzxcvbnm 1
Rfnweiunfyw 1
kgvsdgjgks 1
lf'gvsd 1
owcehdogsdv 1
sd 1
sdfsdfs''lo 1
Running multiple times will still give the same order, with the frequency doubles or triples.

The fourth file, "SimpleText" contains the two files of some short texts. These are the passages quoted from some internet source. The short passages are chosen in the way that the words are either repetitive or it is easy for a human software engineer to verify the solutions generated by the program. For a large passage, it is very tedious for a software engineer to verify the accuracy of the program. This simulates the "real" use of the program. The first file, test1.txt, contains two versions of the Peter Piper tongue twister. The tongue-twister is chosen because the words are repetitive. The second file, test2.txt contains a passage quoted from the write-up for this assignment. When you run the program involving only these two files, the result will be:
of 11
peppers 8
pickled 8
Peter 7
Piper 7
peck 7
picked 7
a 6
your 4
README 3
Your 3
cases 3
or 3
If 2
What 2
and 2
did 2
should 2
text 2
the 2
A 1
How 1
ID 1
Markdown 1
Use 1
Where's 1
Why 1
also 1
any 1
aspects 1
be 1
both 1
can 1
cannot 1
check 1
code 1
containing 1
conventions 1
correctly 1
create 1
describe 1
design 1
do 1
example 1
file 1
for 1
formatting 1
handle 1
he 1
if 1
in 1
include 1
is 1
many 1
may 1
name 1
nano 1
net 1
not 1
notes 1
openable 1
others 1
partners 1
permitted 1
pick 1
plain 1
program 1
similar 1
sorts 1
special 1
specific 1
strategy 1
testing 1
tests 1
those 1
you 1.
Again, run these multiple times will still have the same order of words but their frequencies multipled by the constant.

When you attempted to run all the .txt files in one go, the result will be:
' 24
of 11
peppers 8
pickled 8
Peter 7
Piper 7
peck 7
picked 7
a 6
your 4
README 3
Your 3
cases 3
or 3
'dfgbfdsdcsa 2
Bar 2
If 2
What 2
and 2
bar 2
did 2
sdpfgsdsg 2
should 2
spam 2
text 2
the 2
'' 1
''' 1
'bstop 1
'oo 1
A 1
Foo 1
Foo-bar 1
How 1
ID 1
Markdown 1
Qwertyuiopas 1
Qwertyuiopasdfghjklzxcvbnm 1
Rfnweiunfyw 1
Super 1
Use 1
Where's 1
Why 1
also 1
any 1
aspects 1
bacon 1
baz-quux 1
be 1
both 1
can 1
cannot 1
check 1
code 1
containing 1
conventions 1
correctly 1
create 1
describe 1
design 1
do 1
eggs 1
example 1
file 1
foo 1
for 1
formatting 1
handle 1
he 1
if 1
in 1
include 1
is 1
kgvsdgjgks 1
lf'gvsd 1
many 1
may 1
name 1
nano 1
net 1
not 1
notes 1
openable 1
others 1
owcehdogsdv 1
partners 1
permitted 1
pick 1
plain 1
program 1
sd 1
sdfsdfs''lo 1
similar 1
sorts 1
special 1
specific 1
strategy 1
testing 1
tests 1
those 1
you 1

Feel free to test the program yourself. It accepts any number of command-line inputs.